"use strict";(()=>{var e={};e.id=538,e.ids=[538],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6113:e=>{e.exports=require("crypto")},31062:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>x,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>c,serverHooks:()=>h,staticGenerationAsyncStorage:()=>g});var s={};t.r(s),t.d(s,{POST:()=>l,dynamic:()=>d});var a=t(49303),i=t(88716),n=t(60670),o=t(87070),u=t(98691),p=t(52663);let d="force-dynamic";async function l(e){try{let{email:r,password:t}=await e.json();if(!r||!t)return o.NextResponse.json({message:"Email and password are required"},{status:400});if(await p._.user.findUnique({where:{email:r}}))return o.NextResponse.json({message:"User already exists with this email"},{status:400});let s=await u.ZP.hash(t,12),a=await p._.user.create({data:{email:r,password:s}});return o.NextResponse.json({message:"User created successfully",userId:a.id},{status:201})}catch(e){return console.error("Signup error:",e),o.NextResponse.json({message:"Internal server error"},{status:500})}}let c=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/signup/route",pathname:"/api/signup",filename:"route",bundlePath:"app/api/signup/route"},resolvedPagePath:"C:\\kogito-clean\\app\\api\\signup\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:g,serverHooks:h}=c,x="/api/signup/route";function w(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:g})}},52663:(e,r,t)=>{t.d(r,{_:()=>a});let s=require("@prisma/client"),a=globalThis.prisma??new s.PrismaClient}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[948,885,972],()=>t(31062));module.exports=s})();